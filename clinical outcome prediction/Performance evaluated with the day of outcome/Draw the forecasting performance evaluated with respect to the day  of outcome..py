Y_gap = [4, 1, 3, 13, 7, 1, 3, 1, 13, 2, 6, 3, 3, 9, 1, 2, 4, 5, 2, 1, 8, 3, 0, 15, 0, 0, 3, 2, 11, 5, 3, 1, 1, 7, 1, 1, 5, 1, 1, 3, 7, 1, 2, 12, 2, 1, 2, 1, 0, 7, 5, 9, 7, 2, 3, 15, 0, 0, 7, 22, 0, 44, 1, 5, 12, 12, 21, 17, 21, 1, 5, 8, 3, 34, 13, 3, 0, 7, 33, 14, 5, 3, 20, 4, 5, 0, 3, 2, 0, 13, 2, 11, 1, 4, 7, 7, 2, 9, 0, 10, 1, 13, 3, 12, 3, 0, 15, 2, 26, 8, 8, 3, 1, 5, 1, 0, 3, 10, 10, 9, 3, 5, 3, 0, 13, 5, 4, 3, 4, 4, 4, 7, 5, 6, 1, 4, 13, 6, 8, 6, 3, 3, 2, 6, 2, 1, 5, 3, 5, 2, 0, 5, 0, 1, 2, 0, 14, 6, 4, 3, 11, 2, 27, 5, 8, 10, 4, 10, 9, 18, 13, 0, 3, 2, 8, 21, 4, 5, 2, 33, 10, 11, 7, 5, 11, 6, 0, 5, 1, 7, 5, 6, 1, 9, 3, 2, 2, 9, 1, 2, 6, 0, 2, 4, 3, 7, 3, 18, 11, 2, 15, 2, 6, 21, 11, 7, 8, 11, 18, 10, 18, 19, 7, 21, 4, 20, 11, 13, 7, 4, 9, 9, 3, 21, 1, 1, 14, 10, 21, 10, 8, 21, 6, 11, 7, 11, 12, 4, 10, 10, 12, 9, 8, 24, 6, 3, 10, 10, 1, 14, 13, 12, 19, 16, 17, 23, 1, 1, 15, 1, 69, 9, 6, 22, 19, 29, 24, 23, 10, 9, 9, 8, 35, 22, 5, 1, 15, 34, 19, 11, 14, 25, 23, 13, 4, 6, 7, 10, 15, 9, 17, 7, 7, 15, 15, 11, 14, 1, 22, 6, 24, 11, 19, 18, 1, 24, 8, 16, 21, 6, 12, 9, 1, 15, 13, 13, 15, 14, 8, 7, 1, 20, 10, 10, 12, 12, 13, 8, 19, 8, 7, 9, 13, 9, 8, 7, 6, 7, 5, 6, 2, 23, 13, 13, 10, 29, 10, 29, 17, 14, 12, 27, 14, 15, 20, 17, 1, 8, 9, 29, 32, 10, 6, 8, 34, 14, 16, 8, 13, 8, 7, 13, 10, 10, 12, 3, 5, 12, 12, 7, 8, 13, 9, 14, 8, 23, 16, 7, 24, 3, 10, 30, 25, 12, 9, 16, 20, 14, 27, 27, 8, 24, 17, 20, 13, 10, 11, 25, 6, 26, 2, 2, 23, 20, 31, 19, 17, 22, 16, 15, 13, 19, 15, 6, 13, 22, 15, 15, 13, 33, 7, 4, 11, 12, 2, 18, 16, 15, 33, 23, 21, 33, 2, 2, 20, 3, 79, 12, 15, 38, 40, 30, 28, 38, 12, 12, 15, 36, 10, 2, 19, 35, 23, 14, 20, 40, 27, 24, 11, 8, 13, 18, 18, 13, 21, 13, 13, 22, 19, 16, 21, 2, 13, 18, 23, 25, 2, 29, 12, 24, 17, 19, 16, 3, 18, 17, 16, 22, 21, 9, 2, 37, 16, 17, 22, 16, 11, 15, 19, 13, 9, 12, 7, 12, 12, 12, 5, 29, 20, 19, 38, 12, 33, 24, 26, 17, 17, 21, 24, 20, 3, 12, 38, 14, 9, 35, 23, 10, 21, 11, 13, 14, 20, 9, 12, 18, 14, 26, 21, 15, 27, 4, 18, 37, 31, 15, 10, 24, 17, 32, 31, 13, 28, 21, 24, 18, 14, 34, 9, 35, 3, 3, 28, 34, 32, 25, 26, 19, 19, 21, 19, 8, 19, 22, 20, 17, 7, 14, 16, 19, 20, 19, 42, 29, 29, 38, 3, 3, 27, 5, 14, 23, 47, 38, 33, 42, 18, 15, 37, 15, 3, 22, 36, 24, 18, 34, 44, 31, 29, 16, 15, 21, 20, 20, 18, 25, 20, 24, 3, 19, 20, 29, 33, 4, 28, 19, 22, 27, 6, 19, 29, 25, 11, 3, 40, 22, 29, 14, 12, 18, 21, 19, 8, 26, 24, 35, 31, 20, 28, 5, 18, 28, 11, 36, 30, 12, 28, 13, 21, 16, 23, 15, 29, 26, 5, 46, 44, 21, 15, 26, 21, 37, 19, 17, 40, 13, 42, 4, 4, 37, 31, 25, 20, 25, 10, 28, 26, 22, 21, 11, 18, 22, 26, 20, 47, 35, 43, 4, 4, 6, 16, 33, 52, 47, 40, 45, 27, 16, 38, 17, 4, 37, 35, 21, 39, 50, 35, 21, 21, 23, 26, 22, 26, 4, 27, 34, 39, 9, 31, 21, 8, 24, 34, 15, 4, 44, 27, 15, 15, 10, 29, 29, 37, 38, 27, 31, 7, 25, 39, 22, 37, 34, 15, 34, 37, 24, 19, 30, 34, 6, 47, 26, 23, 28, 40, 22, 22, 45, 21, 5, 5, 40, 36, 28, 29, 18, 29, 27, 13, 30, 31, 25, 51, 40, 5, 5, 7, 23, 56, 56, 55, 49, 32, 17, 39, 5, 38, 45, 29, 45, 42, 26, 29, 25, 34, 23, 34, 5, 40, 15, 32, 11, 27, 41, 22, 5, 48, 33, 16, 21, 15, 31, 36, 38, 42, 8, 25, 38, 35, 37, 25, 21, 31, 7, 55, 30, 25, 47, 6, 6, 47, 45, 30, 39, 17, 36, 35, 28, 56, 46, 6, 6, 8, 60, 62, 62, 52, 46, 19, 40, 6, 39, 36, 26, 38, 25, 6, 47, 17, 33, 15, 31, 27, 6, 19, 22, 39, 40, 43, 14, 29, 39, 38, 38, 26, 24, 32, 8, 31, 26, 51, 7, 7, 53, 46, 34, 43, 20, 38, 60, 7, 7, 9, 66, 64, 53, 26, 41, 7, 40, 40, 27, 26, 7, 35, 22, 36, 7, 28, 42, 46, 40, 42, 40, 27, 33, 9, 32, 31, 55, 8, 8, 59, 49, 37, 22, 8, 8, 10, 66, 54, 42, 41, 47, 28, 27, 8, 42, 39, 8, 31, 43, 52, 41, 45, 41, 28, 34, 10, 33, 57, 9, 9, 57, 42, 24, 9, 9, 11, 67, 56, 43, 42, 52, 29, 28, 9, 44, 33, 44, 58, 42, 48, 42, 29, 35, 11, 34, 63, 10, 10, 65, 10, 10, 12, 68, 60, 44, 43, 30, 31, 10, 46, 45, 63, 43, 50, 43, 30, 36, 12, 36, 11, 11, 70, 11, 11, 13, 71, 63, 45, 44, 33, 34, 11, 48, 46, 70, 44, 52, 44, 32, 37, 13, 37, 13, 12, 73, 12, 13, 14, 46, 45, 34, 38, 12, 52, 50, 45, 53, 46, 35, 38, 14, 38, 17, 13, 13, 14, 15, 47, 46, 35, 41, 13, 53, 46, 47, 37, 39, 15, 39, 20, 14, 14, 15, 16, 48, 36, 42, 14, 54, 47, 38, 40, 16, 43, 21, 15, 15, 16, 17, 49, 37, 15, 56, 48, 39, 41, 17, 47, 16, 16, 17, 19, 50, 39, 16, 60, 49, 42, 21, 53, 17, 17, 19, 22, 51, 40, 17, 64, 50, 43, 24, 18, 18, 29, 52, 41, 18, 44, 28, 19, 19, 34, 53, 42, 21, 45, 32, 20, 21, 54, 45, 22, 46, 36, 27, 30, 55, 51, 47, 38, 32, 56, 48, 57, 49, 58, 51, 59, 52, 60, 53, 61, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73]

Y_true = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Y_predict =  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1]


max_gap = 0



for i in range(0 ,len(Y_gap)):
    if max_gap < Y_gap[i]:
        max_gap = Y_gap[i]




point = []
for i in range(0 ,len(Y_gap)):
    if Y_gap[i] <= 30:
        point.append(i)

new_gap = []
new_true = []
new_predict = []
for i in range(0 ,len(point)):
    new_gap.append(Y_gap[point[i]])
    new_true.append(Y_true[point[i]])
    new_predict.append(Y_predict[point[i]])

Y_gap = new_gap
Y_true = new_true
Y_predict = new_predict

print(Y_gap)
print(Y_true)
print(Y_predict)

gap_death = []
gap_survival = []

part_true = []
part_predict = []
score = []
for i in range(31):
    part_true.append([])
    part_predict.append([])

for i in range(0 ,len(Y_true)):
    part_true[Y_gap[i]].append(Y_true[i])
    part_predict[Y_gap[i]].append(Y_predict[i])
# sklearn.metrics.f1_score(y_true, y_pred, *, labels=None, pos_label=1,average='binary', sample_weight=None,zero_division="warn"):
print(part_true)
print(part_predict)
from sklearn.metrics import accuracy_score
for i in range(31):
    score.append(100 *accuracy_score(part_true[i] ,part_predict[i]))
print(score)

for i in range(31):
    gap_death.append(0)
    gap_survival.append(0)

for i in range(0 ,len(Y_true ) -1):
    if Y_true[i] == 1:
        gap_death[Y_gap[i]] = gap_death[Y_gap[i]] + 1
    if Y_true[i] == 0:
        gap_survival[Y_gap[i]] = gap_survival[Y_gap[i]] + 1

print(gap_survival)
print(gap_death)

import numpy as np
import matplotlib.pyplot as plt

# 这两行代码解决 plt 中文显示的问题
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False



survival = np.array(gap_survival)
death = np.array(gap_death)
bar_width = 0.6
name = ['0' ,'1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15',
        '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26' ,'27' ,'28' ,'29' ,'30']
index1 = np.arange(len(name))

print(len(survival))
print(len(index1))
fig = plt.figure(figsize=(10 ,6))
ax1 = fig.add_subplot(111)
l1 = ax1.bar(index1, height=survival, width=bar_width, color='#77A730', label='survival')
l2 = ax1.bar(index1, height=death, bottom=(survival) ,width=bar_width, color='#D95319', label='death')
ax1.set_ylabel('Patient sample sequence' ,fontdict={'weight': 'normal', 'size': 12})
ax1.set_xlabel('Day to outcome' ,fontdict={'weight': 'normal', 'size': 12})



from matplotlib.pyplot import MultipleLocator
y_major_locator =MultipleLocator(10)
# 把y轴的刻度间隔设置为10，并存在变量里
ax =plt.gca()
# ax为两条坐标轴的实例
# 把x轴的主刻度设置为1的倍数
ax.yaxis.set_major_locator(y_major_locator)

ax2 = ax.twinx()  # this is the important function
l3, = ax2.plot(index1, score ,color='blue' ,marker='*' ,label="classification accuracy")
ax2.set_ylabel('Classification accuracy' ,fontdict={'weight': 'normal', 'size': 12})
ax2.set_xlabel('Day to outcome' ,fontdict={'weight': 'normal', 'size': 12})

lns = [l1 ,l2 ,l3]
labels = [l.get_label() for l in lns]
plt.legend(lns ,labels)



plt.xticks(index1, name ,rotation=0)
plt.savefig("The forecasting performance evaluated with respect to the day of outcome.png")
plt.show()




